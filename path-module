:

üìÇ The path Module in Node.js
üîç Why Use the path Module?
When working with files and directories, handling paths manually can lead to errors, especially when your code runs on different operating systems (Windows, Linux, macOS).

The path module provides utility functions to handle and transform file paths consistently and safely.

const path = require('path');
üõ†Ô∏è Common path Methods:
1. path.basename()
Returns the last part of a file path.
const filePath = '/users/documents/file.txt';
console.log(path.basename(filePath)); // Output: file.txt
console.log(path.basename(filePath, '.txt')); // Output: file

2. path.dirname()
Returns the directory name of a path.
console.log(path.dirname('/users/documents/file.txt')); 
// Output: /users/documents

3. path.extname()
Returns the file extension.
console.log(path.extname('index.html')); 
// Output: .html

4. path.join()
Joins multiple path segments into a single path. Useful for creating paths dynamically.
const fullPath = path.join('folder1', 'folder2', 'file.txt');
console.log(fullPath); 
// Output: folder1/folder2/file.txt

5. path.resolve()
Returns an absolute path by resolving a sequence of paths or path segments.
const absolutePath = path.resolve('folder', 'subfolder', 'file.txt');
console.log(absolutePath); 
// Output: /Users/YourName/currentDir/folder/subfolder/file.txt

6. path.parse() & path.format()
path.parse(): Converts a path into an object with properties like root, dir, base, name, and ext.
path.format(): Converts an object back into a path string.
const parsedPath = path.parse('/users/docs/file.txt');
console.log(parsedPath);
/* Output:
{
  root: '/',
  dir: '/users/docs',
  base: 'file.txt',
  ext: '.txt',
  name: 'file'
}
*/

const formattedPath = path.format(parsedPath);
console.log(formattedPath); 
// Output: /users/docs/file.txt

--------------------extra methods-----------------
1. path.normalize()
Purpose: Corrects the path by resolving .. and . segments.
Use Case: When you get paths from user input or external sources, normalizing ensures the path is consistent and safe.
const path = require('path');

const messyPath = 'folder//subfolder/../file.txt';
const normalizedPath = path.normalize(messyPath);

console.log(normalizedPath); 
// Output: folder/file.txt

2. path.isAbsolute()
Purpose: Checks if a given path is an absolute path.
Absolute Path: Starts from the root directory, e.g., /home/user or C:\Program Files.
Relative Path: Relative to the current working directory, e.g., ./folder/file.txt.
console.log(path.isAbsolute('/home/user/file.txt')); // Output: true
console.log(path.isAbsolute('file.txt')); // Output: false

3. path.relative()
Purpose: Returns the relative path from one path to another.
Use Case: Useful when you need to navigate between directories dynamically.
const from = '/home/user/docs';
const to = '/home/user/images/photo.png';

const relativePath = path.relative(from, to);
console.log(relativePath); 
// Output: ../images/photo.png

4. path.sep
Purpose: Provides the platform-specific path segment separator (/ on POSIX and \ on Windows).
console.log(path.sep); 
// Output: '/' on POSIX, '\' on Windows

5. path.delimiter
Purpose: Returns the delimiter used to separate paths in the PATH environment variable (: on POSIX and ; on Windows).
console.log(path.delimiter); 
// Output: ':' on POSIX, ';' on Windows

// Example usage
const envPaths = process.env.PATH.split(path.delimiter);
console.log(envPaths);














